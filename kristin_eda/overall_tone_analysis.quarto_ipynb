{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"News Network Tone Analysis\"\n",
        "author: \"Kristin Lloyd\"\n",
        "format: \n",
        "  html:\n",
        "    embed-resources: true\n",
        "    code-fold: true\n",
        "    toc: true\n",
        "    toc-depth: 3\n",
        "    toc-title: \"Contents\"\n",
        "    code-tools: true\n",
        "    error: false  \n",
        "---\n",
        "\n",
        "\n",
        "# Overall Tone Analysis (ðŸ”¹GDELT Only)\n",
        "\n",
        "This section examines long-term sentiment trends across three major news networks (Fox News, MSNBC, and ABC News) using GDELT tone scores from 2015 to 2025. We analyze how tone varies over time, especially during key periods like elections and major events.\n",
        "\n",
        "## Data Processing\n"
      ],
      "id": "afd4b33c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "\n",
        "import pandas as pd\n",
        "import glob\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "from collections import Counter\n",
        "from scipy.stats import ttest_ind\n",
        "import matplotlib.dates as mdates\n",
        "from matplotlib.ticker import MaxNLocator\n",
        "\n",
        "# Set visualization style\n",
        "plt.style.use('seaborn-v0_8-whitegrid')\n",
        "plt.rcParams['font.family'] = 'sans-serif'\n",
        "plt.rcParams['font.sans-serif'] = ['Arial', 'DejaVu Sans', 'Liberation Sans']\n",
        "\n",
        "# Define network colors\n",
        "NETWORK_COLORS = {\n",
        "    'Fox News': '#E41A1C',    # Red for Fox\n",
        "    'MSNBC': '#377EB8',       # Blue for MSNBC\n",
        "    'ABC News': '#984EA3'     # Purple for ABC\n",
        "}\n",
        "\n",
        "# Import data files\n",
        "csv_files = (\n",
        "    glob.glob(\"../data/fox/fox*.csv\") +\n",
        "    glob.glob(\"../data/abc/abc*.csv\") +\n",
        "    glob.glob(\"../data/msnbc/msnbc*.csv\")\n",
        ")\n",
        "\n",
        "df = pd.concat([pd.read_csv(file) for file in csv_files], ignore_index=True)\n",
        "\n",
        "# Select relevant columns\n",
        "columns_of_interest = [\n",
        "    \"parsed_date\", \"url\", \"headline_from_url\",\n",
        "    \"V2Themes\", \"V2Locations\", \"V2Persons\",\n",
        "    \"V2Organizations\", \"V2Tone\"\n",
        "]\n",
        "df = df[columns_of_interest]\n",
        "\n",
        "# Convert date and extract network information\n",
        "df[\"parsed_date\"] = pd.to_datetime(df[\"parsed_date\"], errors=\"coerce\").dt.tz_localize(None)\n",
        "\n",
        "# Extract network source from URLs\n",
        "def extract_network(url):\n",
        "    if 'fox' in url.lower():\n",
        "        return 'Fox News'\n",
        "    elif 'abc' in url.lower():\n",
        "        return 'ABC News'\n",
        "    elif 'msnbc' in url.lower():\n",
        "        return 'MSNBC'\n",
        "    else:\n",
        "        return 'Unknown'\n",
        "\n",
        "# Add network column\n",
        "df['network'] = df['url'].apply(extract_network)\n",
        "\n",
        "# Extract tone components\n",
        "tone_split = df[\"V2Tone\"].str.split(\",\", expand=True)\n",
        "df[\"tone\"] = pd.to_numeric(tone_split[0], errors=\"coerce\")\n",
        "df[\"positive_score\"] = pd.to_numeric(tone_split[1], errors=\"coerce\")\n",
        "df[\"negative_score\"] = pd.to_numeric(tone_split[2], errors=\"coerce\")\n",
        "\n",
        "# Create month and year columns for aggregation\n",
        "df['month'] = df['parsed_date'].dt.to_period('M')\n",
        "df['year'] = df['parsed_date'].dt.year\n",
        "df['month_year'] = df['parsed_date'].dt.strftime('%Y-%m')"
      ],
      "id": "b2f5e04b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Understanding GDELT Tone Scores\n",
        "\n",
        "Before diving into the analysis, it's important to understand how GDELT tone scores are calculated:\n",
        "\n",
        "- **Tone Score**: A measure ranging typically from -10 (extremely negative) to +10 (extremely positive), with 0 representing neutral coverage.\n",
        "- **Calculation Method**: GDELT uses natural language processing to analyze the emotional tone of news articles, considering both positive and negative language.\n",
        "- **Composite Measure**: The overall tone score is derived from separate positive and negative components, which we'll examine separately later.\n",
        "\n",
        "Higher tone scores indicate more positive language, while lower scores indicate more negative language. These scores help us quantify and compare sentiment across different news sources over time.\n",
        "\n",
        "## Dataset Overview\n",
        "\n",
        "First, let's examine the number of articles analyzed per network:\n"
      ],
      "id": "10844531"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| label: fig-article-count\n",
        "#| fig-cap: Number of articles analyzed by network\n",
        "\n",
        "article_counts = df.groupby('network').size()\n",
        "print(\"\\nNumber of Articles Analyzed by Network:\")\n",
        "display(article_counts)\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "bars = plt.bar(article_counts.index, article_counts.values, color=[NETWORK_COLORS[network] for network in article_counts.index])\n",
        "\n",
        "plt.title('Number of Articles by News Network', fontsize=14, fontweight='bold')\n",
        "plt.xlabel('News Network')\n",
        "plt.ylabel('Number of Articles')\n",
        "plt.xticks(rotation=0)\n",
        "plt.grid(axis='y', alpha=0.3)\n",
        "\n",
        "# Add count labels on top of the bars\n",
        "for bar in bars:\n",
        "    height = bar.get_height()\n",
        "    plt.text(bar.get_x() + bar.get_width()/2., height + 0.1,\n",
        "             f'{height:,}',\n",
        "             ha='center', va='bottom', fontweight='bold')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "fig-article-count",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Note on Sample Sizes**: The data shows a smaller sample for MSNBC compared to Fox News and ABC News. These differences reflect availability via GDELT's API. This discrepancy should be considered when interpreting results, as it may impact the representativeness of trends for MSNBC.\n",
        "\n",
        "## Tone Distribution Analysis\n",
        "\n",
        "Let's examine how tone scores are distributed across the three networks:\n"
      ],
      "id": "2aa23aa2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| label: fig-tone-distribution\n",
        "#| fig-cap: Tone score distribution comparison between networks\n",
        "\n",
        "plt.figure(figsize=(12, 8))\n",
        "\n",
        "# Create violin plots\n",
        "parts = plt.violinplot([df[df['network'] == network]['tone'].dropna() for network in NETWORK_COLORS.keys()], \n",
        "                 showmeans=False, showmedians=True)\n",
        "\n",
        "# Color the violin plots according to the network\n",
        "for i, pc in enumerate(parts['bodies']):\n",
        "    network = list(NETWORK_COLORS.keys())[i]\n",
        "    pc.set_facecolor(NETWORK_COLORS[network])\n",
        "    pc.set_edgecolor('black')\n",
        "    pc.set_alpha(0.7)\n",
        "\n",
        "# Add boxplot inside the violin plots\n",
        "positions = range(1, len(NETWORK_COLORS) + 1)\n",
        "boxplots = plt.boxplot([df[df['network'] == network]['tone'].dropna() for network in NETWORK_COLORS.keys()], \n",
        "          positions=positions, widths=0.15, patch_artist=True,\n",
        "          showfliers=False, showcaps=True, showbox=True, showmeans=True)\n",
        "\n",
        "# Color the boxplots\n",
        "for i, box in enumerate(boxplots['boxes']):\n",
        "    network = list(NETWORK_COLORS.keys())[i]\n",
        "    box.set_facecolor(NETWORK_COLORS[network])\n",
        "    box.set_alpha(0.5)\n",
        "\n",
        "# Add neutral line\n",
        "plt.axhline(y=0, color='black', linestyle='--', alpha=0.7, label='Neutral Tone')\n",
        "\n",
        "# Add mean lines and values\n",
        "for i, network in enumerate(NETWORK_COLORS.keys()):\n",
        "    mean_val = df[df['network'] == network]['tone'].mean()\n",
        "    plt.text(i + 1, mean_val + 0.2, f'Mean: {mean_val:.2f}', \n",
        "             ha='center', va='bottom', fontsize=10, fontweight='bold')\n",
        "\n",
        "# Customize the plot\n",
        "plt.title('Tone Score Distribution by Network', fontsize=16, fontweight='bold')\n",
        "plt.xlabel('News Network', fontsize=12)\n",
        "plt.ylabel('Tone Score', fontsize=12)\n",
        "plt.xticks(positions, NETWORK_COLORS.keys())\n",
        "plt.grid(axis='y', alpha=0.3)\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "fig-tone-distribution",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "All networks skew slightly negative, with Fox News averaging â€“2.69, MSNBC â€“2.74, and ABC News â€“3.10. While the general shape of the distributions is similar, ABC News has a slightly more negative average and wider spread, suggesting a greater variability in tone across its coverage. The dashed line at 0 represents a neutral tone.\n"
      ],
      "id": "3484ed19"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| label: fig-tone-boxplot\n",
        "#| fig-cap: Tone distribution boxplot comparison between networks\n",
        "\n",
        "plt.figure(figsize=(12, 8))\n",
        "sns.boxplot(x='network', y='tone', data=df, palette=NETWORK_COLORS)\n",
        "plt.axhline(y=0, color='black', linestyle='--', alpha=0.7, label='Neutral Tone')\n",
        "plt.title('Tone Score Distribution', fontsize=16, fontweight='bold')\n",
        "plt.xlabel('News Network', fontsize=12)\n",
        "plt.ylabel('Tone Score', fontsize=12)\n",
        "plt.grid(axis='y', alpha=0.3)\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "fig-tone-boxplot",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "All three networks center below the neutral tone line, reflecting a general trend toward negative coverage. Fox and ABC News display slightly tighter interquartile ranges, while MSNBC shows more outliers on both the positive and negative ends. ABC News appears to have the most extreme negative outliers, with some scores dipping below â€“40.\n",
        "\n",
        "### Key Observations:\n",
        "\n",
        "1. **Median Tone Levels**: Fox News tends to have a higher median tone compared to MSNBC and ABC News, suggesting generally more positive language.\n",
        "2. **Distribution Width**: MSNBC shows the widest distribution of tone scores, indicating greater variability in sentiment.\n",
        "3. **Negative Skew**: All three networks show a slight negative skew, meaning they tend toward negative coverage overall, but Fox News is closest to neutral.\n",
        "\n",
        "## Long-Term Tone Trends (2015-2025)\n",
        "\n",
        "The following visualization tracks monthly average tone scores across the three networks over time:\n"
      ],
      "id": "ea4436a8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| label: fig-monthly-tone-trends\n",
        "#| fig-cap: Monthly average tone trends by news network (2015-2025)\n",
        "\n",
        "# Calculate monthly average tone for each network\n",
        "monthly_tone = df.groupby(['month', 'network'])['tone'].mean().unstack()"
      ],
      "id": "fig-monthly-tone-trends",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Rolling Average Trend\n",
        "\n",
        "For a clearer view of long-term trends, here's a 6-month rolling average of tone scores:\n"
      ],
      "id": "4f7acc2b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Convert month period to datetime for rolling calculation\n",
        "# Convert month period to datetime for rolling calculation\n",
        "monthly_tone_reset = monthly_tone.reset_index()\n",
        "monthly_tone_reset['month_datetime'] = monthly_tone_reset['month'].dt.to_timestamp()\n",
        "monthly_tone_reset = monthly_tone_reset.set_index('month_datetime')\n",
        "\n",
        "# Calculate 6-month rolling average\n",
        "rolling_window = 6\n",
        "rolling_tone = monthly_tone_reset.drop('month', axis=1).rolling(window=rolling_window, min_periods=1).mean()\n",
        "\n",
        "# Plot rolling average trends\n",
        "plt.figure(figsize=(14, 8))\n",
        "\n",
        "# Plot lines for each network\n",
        "for column in rolling_tone.columns:\n",
        "    plt.plot(rolling_tone.index, rolling_tone[column], \n",
        "             linewidth=3, label=column, color=NETWORK_COLORS[column])\n",
        "\n",
        "# Removed event annotations\n",
        "# Removed shaded election years\n",
        "\n",
        "# Add neutral line\n",
        "plt.axhline(y=0, color='black', linestyle='--', alpha=0.5, label='Neutral Tone')\n",
        "\n",
        "# Customize the plot\n",
        "plt.title(f'{rolling_window}-Month Rolling Average Tone by News Network (2015-2025)', fontsize=16, fontweight='bold')\n",
        "plt.xlabel('Date', fontsize=12)\n",
        "plt.ylabel('Average Tone Score', fontsize=12)\n",
        "plt.grid(alpha=0.3)\n",
        "plt.legend(loc='best')\n",
        "\n",
        "# Format x-axis to show years\n",
        "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
        "plt.gca().xaxis.set_major_locator(mdates.YearLocator())\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "703bf385",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "This smoothed trendline shows how average tone evolved over time for each network using GDELT data. Fox News (red) exhibits a notable upward trend in tone starting around 2023, while MSNBC (blue) shows more volatility with several peaks and sharp declines across the decade. ABC News (purple) remains relatively steady with consistently negative tone scores.\n",
        "\n",
        "### Tone Volatility Analysis\n",
        "\n",
        "Let's examine how tone volatility (measured by standard deviation) differs across networks:\n"
      ],
      "id": "8d2e7f1f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| label: fig-tone-volatility\n",
        "#| fig-cap: Tone volatility by news network (2015-2025)\n",
        "\n",
        "# Calculate monthly standard deviation of tone for each network\n",
        "monthly_volatility = df.groupby(['year', 'network'])['tone'].std().unstack()\n",
        "\n",
        "# Plot yearly volatility\n",
        "plt.figure(figsize=(12, 6))\n",
        "\n",
        "# Plot lines for each network\n",
        "for column in monthly_volatility.columns:\n",
        "    plt.plot(monthly_volatility.index, monthly_volatility[column], \n",
        "             marker='o', markersize=6, linewidth=2, \n",
        "             label=column, color=NETWORK_COLORS[column])\n",
        "\n",
        "# Removed shaded election year highlighting\n",
        "\n",
        "# Customize the plot\n",
        "plt.title('Yearly Tone Volatility by News Network (2015-2025)', fontsize=16, fontweight='bold')\n",
        "plt.xlabel('Year', fontsize=12)\n",
        "plt.ylabel('Tone Standard Deviation', fontsize=12)\n",
        "plt.grid(alpha=0.3)\n",
        "plt.legend(loc='best')\n",
        "plt.xticks(monthly_volatility.index)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "fig-tone-volatility",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "This line plot tracks the standard deviation of tone scores by year for each network, offering a view into how volatile or stable their coverage was. MSNBC (blue) shows the highest variability, peaking in 2020, which coincides with major societal events. Fox News (red) displays a steady decline in volatility after 2018, suggesting more consistent tone in recent years. ABC News (purple) remains relatively stable throughout the decade.\n",
        "\n",
        "## Tone Heatmap by Month/Year\n",
        "\n",
        "This visualization shows tone patterns over time in a heatmap format:\n"
      ],
      "id": "628f6764"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| label: fig-tone-heatmap\n",
        "#| fig-cap: Tone heatmap by month and year for each network\n",
        "\n",
        "# Prepare data for heatmap\n",
        "yearly_monthly_tone = df.groupby(['year', df['parsed_date'].dt.month, 'network'])['tone'].mean().unstack()\n",
        "\n",
        "# Create a separate heatmap for each network\n",
        "networks = ['Fox News', 'MSNBC', 'ABC News']\n",
        "fig, axes = plt.subplots(len(networks), 1, figsize=(14, 15), sharex=True)\n",
        "\n",
        "for i, network in enumerate(networks):\n",
        "    if network in yearly_monthly_tone.columns:\n",
        "        # Extract data for this network\n",
        "        network_data = yearly_monthly_tone[network].unstack()\n",
        "        \n",
        "        # Create the heatmap\n",
        "        im = axes[i].imshow(network_data, cmap='RdBu_r', aspect='auto', vmin=-2, vmax=2)\n",
        "        \n",
        "        # Add network name as title\n",
        "        axes[i].set_title(f'{network} Tone by Month/Year', fontsize=14, fontweight='bold')\n",
        "        \n",
        "        # Set y-axis (years)\n",
        "        axes[i].set_yticks(range(len(network_data.index)))\n",
        "        axes[i].set_yticklabels(network_data.index)\n",
        "        \n",
        "        # Set x-axis (months)\n",
        "        if i == len(networks) - 1:  # Only add month labels to the bottom subplot\n",
        "            axes[i].set_xticks(range(12))\n",
        "            axes[i].set_xticklabels(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', \n",
        "                                    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])\n",
        "        \n",
        "        # Add text annotations with tone values\n",
        "        for y in range(len(network_data.index)):\n",
        "            for x in range(len(network_data.columns)):\n",
        "                if not np.isnan(network_data.iloc[y, x]):\n",
        "                    text_color = 'white' if abs(network_data.iloc[y, x]) > 1 else 'black'\n",
        "                    axes[i].text(x, y, f'{network_data.iloc[y, x]:.1f}', \n",
        "                              ha='center', va='center', color=text_color, fontsize=8)\n",
        "\n",
        "# Add a single colorbar for all heatmaps\n",
        "cbar_ax = fig.add_axes([0.92, 0.15, 0.02, 0.7])\n",
        "cbar = fig.colorbar(im, cax=cbar_ax)\n",
        "cbar.set_label('Tone Score', fontsize=12)\n",
        "\n",
        "plt.suptitle('News Network Tone by Month and Year (2015-2025)', fontsize=16, fontweight='bold')\n",
        "plt.tight_layout(rect=[0, 0, 0.9, 0.95])\n",
        "plt.show()"
      ],
      "id": "fig-tone-heatmap",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Darker blue tones represent more negative sentiment, while lighter shades and reds indicate more positive coverage. Across all three networks, most months and years exhibit consistently negative tone, reflecting the overall pessimistic framing of news coverage in this period. MSNBC shows greater variability between years, especially around 2016â€“2018, while Fox News trends sharply more positive in early 2025. ABC News remains steadily negative with minimal monthly fluctuation. This format makes it easy to spot brief tonal shifts against a predominantly negative backdrop.\n",
        "\n",
        "## Positive vs Negative Component Analysis\n",
        "\n",
        "To better understand the composition of tone scores, let's analyze the positive and negative components separately:\n"
      ],
      "id": "5351fc57"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| label: fig-pos-neg-comparison\n",
        "#| fig-cap: Comparison of average positive and negative scores by network\n",
        "\n",
        "avg_scores = df.groupby('network')[['positive_score', 'negative_score']].mean().reset_index()\n",
        "\n",
        "plt.figure(figsize=(12, 8))\n",
        "bar_width = 0.35\n",
        "x = np.arange(len(avg_scores))\n",
        "\n",
        "plt.bar(x - bar_width/2, avg_scores['positive_score'], bar_width, label='Positive Score', color='forestgreen', alpha=0.7)\n",
        "plt.bar(x + bar_width/2, avg_scores['negative_score'], bar_width, label='Negative Score', color='firebrick', alpha=0.7)\n",
        "\n",
        "# Add network-colored markers at the bottom\n",
        "for i, network in enumerate(avg_scores['network']):\n",
        "    plt.plot(i, -0.5, marker='o', markersize=15, color=NETWORK_COLORS[network])\n",
        "    plt.text(i, -0.6, network, ha='center', va='top', fontsize=10, fontweight='bold')\n",
        "\n",
        "plt.title('Average Positive vs Negative Scores by Network', fontsize=16, fontweight='bold')\n",
        "plt.ylabel('Average Score', fontsize=12)\n",
        "plt.xticks([])  # Hide x-axis ticks since we added custom network labels\n",
        "plt.legend()\n",
        "plt.grid(axis='y', alpha=0.3)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "fig-pos-neg-comparison",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Across all three networks, negative scores are significantly higher than positive ones, reinforcing the trend of predominantly negative news coverage observed elsewhere in the dataset. Fox News and ABC News have slightly higher average positive scores than MSNBC, but the gap between positive and negative sentiment is consistently large across the board. This highlights how negative language tends to dominate regardless of network affiliation.\n",
        "\n",
        "## Statistical Analysis\n"
      ],
      "id": "41fa86c6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| label: tbl-tone-stats\n",
        "#| tbl-cap: Tone analysis summary statistics by network\n",
        "\n",
        "tone_stats = df.groupby('network')['tone'].agg(['mean', 'std', 'median', 'min', 'max']).round(2)\n",
        "pos_stats = df.groupby('network')['positive_score'].agg(['mean', 'std']).round(2)\n",
        "neg_stats = df.groupby('network')['negative_score'].agg(['mean', 'std']).round(2)\n",
        "\n",
        "summary_stats = pd.DataFrame({\n",
        "    'Mean Tone': tone_stats['mean'],\n",
        "    'Median Tone': tone_stats['median'],\n",
        "    'Tone Std Dev': tone_stats['std'],\n",
        "    'Min Tone': tone_stats['min'],\n",
        "    'Max Tone': tone_stats['max'],\n",
        "    'Mean Positive Score': pos_stats['mean'],\n",
        "    'Mean Negative Score': neg_stats['mean']\n",
        "})\n",
        "\n",
        "summary_stats"
      ],
      "id": "tbl-tone-stats",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| label: tbl-significance-tests\n",
        "#| tbl-cap: Statistical significance of tone differences between networks\n",
        "\n",
        "print(\"Statistical Significance Testing (t-test for tone differences):\")\n",
        "networks = df['network'].unique()\n",
        "\n",
        "significance_results = []\n",
        "\n",
        "for i in range(len(networks)):\n",
        "    for j in range(i+1, len(networks)):\n",
        "        network1 = networks[i]\n",
        "        network2 = networks[j]\n",
        "        tone1 = df[df['network'] == network1]['tone']\n",
        "        tone2 = df[df['network'] == network2]['tone']\n",
        "        \n",
        "        t_stat, p_val = ttest_ind(tone1, tone2, equal_var=False)\n",
        "        \n",
        "        # Add to results\n",
        "        significance_results.append({\n",
        "            'Comparison': f\"{network1} vs {network2}\",\n",
        "            't-statistic': round(t_stat, 4),\n",
        "            'p-value': round(p_val, 4),\n",
        "            'Significant': 'Yes' if p_val < 0.05 else 'No'\n",
        "        })\n",
        "\n",
        "significance_df = pd.DataFrame(significance_results)\n",
        "display(significance_df)"
      ],
      "id": "tbl-significance-tests",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Key Findings\n",
        "\n",
        "This table summarizes results from t-tests comparing average tone scores between each pair of networks. All comparisons are statistically significant at p < 0.01, confirming meaningful differences in tone across outlets. The largest difference is between Fox News and ABC News, followed by ABC News vs. MSNBC. Even the more modest difference between Fox News and MSNBC is statistically significant."
      ],
      "id": "2342b715"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}