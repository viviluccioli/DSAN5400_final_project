---
title: "News Network Tone Analysis"
author: "Kristin Lloyd"
format: 
  html:
    code-fold: true
    toc: true
    toc-depth: 3
    number-sections: true
    theme: cosmo
    fig-width: 9
    fig-height: 6
    fig-dpi: 300
    self-contained: true
execute:
  warning: false
  message: false
bibliography: references.bib
nocite: "@*"
csl: apa.csl
---

```{python}
import pandas as pd
import glob
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from datetime import datetime
from scipy import stats

# Set the visual style
plt.style.use('seaborn-v0_8-whitegrid')
sns.set_palette("deep")
plt.rcParams['font.family'] = 'sans-serif'
plt.rcParams['font.sans-serif'] = ['Arial', 'DejaVu Sans', 'Liberation Sans']

# Define election dates
election_dates = {
    "2016": datetime(2016, 11, 8),
    "2020": datetime(2020, 11, 3),
    "2024": datetime(2024, 11, 5)
}

# Read in all CSVs for election years 2016, 2020, and 2024 from all sources
csv_files = []
for year in election_dates.keys():
    csv_files.extend(glob.glob(f"../data/*/*{year}*.csv"))

df = pd.concat([pd.read_csv(file) for file in csv_files], ignore_index=True)

# Convert date column
df["parsed_date"] = pd.to_datetime(df["parsed_date"], errors="coerce")

# Label each article as "Before" or "After" the election
def classify_period(row):
    for year, eday in election_dates.items():
        if eday - pd.Timedelta(days=30) <= row["parsed_date"] <= eday + pd.Timedelta(days=30):
            return f"{year}_Before" if row["parsed_date"] < eday else f"{year}_After"
    return None

df["period"] = df.apply(classify_period, axis=1)

# Extract network information from URL
def extract_network(url):
    if 'fox' in str(url).lower():
        return 'Fox News'
    elif 'msnbc' in str(url).lower():
        return 'MSNBC'
    elif 'abc' in str(url).lower():
        return 'ABC News'
    else:
        return 'Other'

df['network'] = df['url'].apply(extract_network)

# Keep only rows with AFINN scores and valid periods
df = df.dropna(subset=["afinn_tone_score", "period"])

# Display data summary
print(f"Loaded {len(df)} articles with valid AFINN scores and election periods")
print("\nArticles by period:")
print(df['period'].value_counts())
print("\nArticles by network:")
print(df['network'].value_counts())
```

```{python}

plt.figure(figsize=(12, 7))
sns.boxplot(data=df, x="period", y="afinn_tone_score", palette="coolwarm")
plt.axhline(0, color='gray', linestyle='--', alpha=0.7, label='Neutral Tone')
plt.title("AFINN Tone Score Before vs After U.S. Elections", fontsize=16, fontweight='bold')
plt.xlabel("Election Period", fontsize=14)
plt.ylabel("AFINN Tone Score", fontsize=14)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

```

```{python}

plt.figure(figsize=(14, 8))
sns.boxplot(data=df, x="period", y="afinn_tone_score", hue="network", palette=["#E41A1C", "#377EB8", "#984EA3"])
plt.axhline(0, color='gray', linestyle='--', alpha=0.7, label='Neutral Tone')
plt.title("AFINN Tone Scores by Network Before and After Elections", fontsize=16, fontweight='bold')
plt.xlabel("Election Period", fontsize=14)
plt.ylabel("AFINN Tone Score", fontsize=14)
plt.xticks(rotation=45)
plt.legend(title="News Network")
plt.tight_layout()
plt.show()

```
