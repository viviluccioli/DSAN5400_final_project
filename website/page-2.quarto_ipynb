{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Election Tone Analysis\"\n",
        "format: \n",
        "  html:\n",
        "    code-fold: true\n",
        "    toc: true\n",
        "    number-sections: true\n",
        "execute:\n",
        "  warning: false\n",
        "  message: false\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "![](images/intro2.png){width=150px}\n",
        "\n",
        "# Election Tone Analysis \n",
        "\n",
        "## 5-Day Average Tone Around the 2016 Election\n",
        "\n",
        "This figure shows the 5-day rolling average tone scores for MSNBC, ABC News, and Fox News during the 60-day period surrounding the 2016 U.S. presidential election (October 9â€“December 8). Tone was measured using GDELTâ€™s tone scores, where lower values represent more negative sentiment.\n",
        "\n",
        "Leading up to Election Day (marked by the red dashed line), all three networks maintained negative overall tone, with MSNBC generally exhibiting the most negative coverage, followed by ABC News and Fox News. Tone across networks reached its least negative point around Election Day itself, suggesting a temporary moderation in reporting tone during the immediate election period.\n"
      ],
      "id": "e97b22b8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "\n",
        "import pandas as pd\n",
        "import glob\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "from collections import Counter\n",
        "from scipy.stats import ttest_ind\n",
        "import matplotlib.dates as mdates\n",
        "from matplotlib.ticker import MaxNLocator\n",
        "\n",
        "# Set visualization style\n",
        "plt.style.use('seaborn-v0_8-whitegrid')\n",
        "plt.rcParams['font.family'] = 'sans-serif'\n",
        "plt.rcParams['font.sans-serif'] = ['Arial', 'DejaVu Sans', 'Liberation Sans']\n",
        "\n",
        "# Define network colors\n",
        "NETWORK_COLORS = {\n",
        "    'Fox News': '#E41A1C',    # Red for Fox\n",
        "    'MSNBC': '#377EB8',       # Blue for MSNBC\n",
        "    'ABC News': '#984EA3'     # Purple for ABC\n",
        "}\n",
        "\n",
        "# Import data files\n",
        "csv_files = (\n",
        "    glob.glob(\"../data/fox/fox*.csv\") +\n",
        "    glob.glob(\"../data/abc/abc*.csv\") +\n",
        "    glob.glob(\"../data/msnbc/msnbc*.csv\")\n",
        ")\n",
        "\n",
        "df = pd.concat([pd.read_csv(file) for file in csv_files], ignore_index=True)\n",
        "\n",
        "# Select relevant columns\n",
        "columns_of_interest = [\n",
        "    \"parsed_date\", \"url\", \"headline_from_url\",\n",
        "    \"V2Themes\", \"V2Locations\", \"V2Persons\",\n",
        "    \"V2Organizations\", \"V2Tone\"\n",
        "]\n",
        "df = df[columns_of_interest]\n",
        "\n",
        "# Convert date and extract network information\n",
        "df[\"parsed_date\"] = pd.to_datetime(df[\"parsed_date\"], errors=\"coerce\").dt.tz_localize(None)\n",
        "\n",
        "# Extract network source from URLs\n",
        "def extract_network(url):\n",
        "    if 'fox' in url.lower():\n",
        "        return 'Fox News'\n",
        "    elif 'abc' in url.lower():\n",
        "        return 'ABC News'\n",
        "    elif 'msnbc' in url.lower():\n",
        "        return 'MSNBC'\n",
        "    else:\n",
        "        return 'Unknown'\n",
        "\n",
        "# Add network column\n",
        "df['network'] = df['url'].apply(extract_network)\n",
        "\n",
        "# Extract tone components\n",
        "tone_split = df[\"V2Tone\"].str.split(\",\", expand=True)\n",
        "df[\"tone\"] = pd.to_numeric(tone_split[0], errors=\"coerce\")\n",
        "df[\"positive_score\"] = pd.to_numeric(tone_split[1], errors=\"coerce\")\n",
        "df[\"negative_score\"] = pd.to_numeric(tone_split[2], errors=\"coerce\")\n",
        "\n",
        "# Create month and year columns for aggregation\n",
        "df['month'] = df['parsed_date'].dt.to_period('M')\n",
        "df['year'] = df['parsed_date'].dt.year\n",
        "df['month_year'] = df['parsed_date'].dt.strftime('%Y-%m')"
      ],
      "id": "640ab761",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "In the post-election period, MSNBC's tone shifted sharply toward a more neutral or even slightly positive direction, peaking roughly two to three weeks after the election. ABC News displayed a smaller but similarly positive shift, while Fox News' tone remained comparatively stable with only minor fluctuations. These post-election trends may reflect different editorial responses to the election outcome: MSNBC and ABC News may have covered post-election reactions, protests, or policy uncertainty with varied tone shifts, while Fox News' steadier sentiment suggests less divergence from its pre-election reporting tone.\n",
        "\n",
        "Notably, at the very end of the 60-day window, both MSNBC and ABC News show large positive spikes in average tone scores. These sharp increases could be due to several factors, such as the seasonal effect of late-November and December news coverage shifting toward holiday stories, end-of-year recaps, or less election-focused reporting, all of which typically feature more positive or neutral language. Fox News did not show a comparable spike, indicating that editorial or thematic focus during this time may have differed significantly across networks.\n",
        "\n",
        "Overall, these patterns highlight both a convergence of reporting tone during the election and a divergence afterward, with clear differences emerging between the networks in their post-election coverage tone trajectories.\n"
      ],
      "id": "9680dccc"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "\n",
        "import plotly.graph_objects as go\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import datetime as dt\n",
        "\n",
        "# Network color definitions\n",
        "NETWORK_COLORS = {\n",
        "    'MSNBC': '#3366CC',\n",
        "    'ABC News': '#6633CC',\n",
        "    'Fox News': '#CC3366'\n",
        "}\n",
        "\n",
        "# Define the 30-day window around the 2016 election\n",
        "start_date = pd.to_datetime(\"2016-10-09\")\n",
        "end_date = pd.to_datetime(\"2016-12-08\")\n",
        "election_date = pd.to_datetime(\"2016-11-08\")\n",
        "\n",
        "# Filter the dataframe to this window using parsed_date \n",
        "df_window = df[(df['parsed_date'] >= start_date) & (df['parsed_date'] <= end_date)]\n",
        "\n",
        "# Create a column for 5-day periods\n",
        "# First, calculate days since start\n",
        "df_window['days_since_start'] = (df_window['parsed_date'] - start_date).dt.days\n",
        "# Then, group into 5-day periods (0-4, 5-9, etc.)\n",
        "df_window['period_num'] = df_window['days_since_start'] // 5\n",
        "# Create period start dates for plotting\n",
        "period_start_dates = [start_date + pd.Timedelta(days=i*5) for i in range(13)]  # 60 days / 5 = 12 periods (0-11)\n",
        "\n",
        "# Calculate average tone by network and 5-day period\n",
        "avg_tone = df_window.groupby(['network', 'period_num'])['tone'].mean().reset_index()\n",
        "\n",
        "# Convert to wide format for easier plotting\n",
        "pivot_data = avg_tone.pivot(index='period_num', columns='network', values='tone').reset_index()\n",
        "\n",
        "# Create period dates for x-axis\n",
        "period_dates = period_start_dates[:len(pivot_data)]\n",
        "\n",
        "# Create the plot\n",
        "fig = go.Figure()\n",
        "\n",
        "# Add lines for each network\n",
        "for network in NETWORK_COLORS.keys():\n",
        "    if network in pivot_data.columns:\n",
        "        fig.add_trace(go.Scatter(\n",
        "            x=period_dates,\n",
        "            y=pivot_data[network].values,\n",
        "            mode='lines+markers',\n",
        "            name=network,\n",
        "            line=dict(color=NETWORK_COLORS[network], width=4),\n",
        "            marker=dict(size=8)\n",
        "        ))\n",
        "\n",
        "# Add neutral tone line\n",
        "fig.add_shape(\n",
        "    type=\"line\",\n",
        "    x0=start_date,\n",
        "    x1=end_date,\n",
        "    y0=0,\n",
        "    y1=0,\n",
        "    line=dict(color=\"black\", width=2, dash=\"dash\")\n",
        ")\n",
        "\n",
        "# Add election day vertical line\n",
        "fig.add_vline(\n",
        "    x=election_date,\n",
        "    line=dict(color=\"red\", width=2, dash=\"dot\")\n",
        ")\n",
        "\n",
        "# Calculate y-axis range\n",
        "y_values = pivot_data[['MSNBC', 'ABC News', 'Fox News']].values.flatten()\n",
        "y_min = min([v for v in y_values if not np.isnan(v)]) - 0.5\n",
        "y_max = max([v for v in y_values if not np.isnan(v)]) + 0.5\n",
        "\n",
        "# Update layout\n",
        "fig.update_layout(\n",
        "    title=dict(\n",
        "        text=\"5-Day Average Tone by News Network Around 2016 Election\",\n",
        "        font=dict(size=18, family=\"Arial, sans-serif\"),\n",
        "        x=0.5,\n",
        "        xanchor=\"center\"\n",
        "    ),\n",
        "    xaxis=dict(\n",
        "        title=\"5-Day Periods (Oct 9 - Dec 8, 2016)\",\n",
        "        titlefont=dict(size=14),\n",
        "        tickformat=\"%b %d\",\n",
        "        gridcolor=\"#E5E5E5\",\n",
        "        showgrid=True,\n",
        "        tickvals=[pd.to_datetime(\"2016-11-08\")],  # Only mark election day\n",
        "        ticktext=[\"Election Day (Nov 8)\"]\n",
        "    ),\n",
        "    yaxis=dict(\n",
        "        title=\"Average Tone Score\",\n",
        "        titlefont=dict(size=14),\n",
        "        gridcolor=\"#E5E5E5\",\n",
        "        showgrid=True,\n",
        "        range=[y_min, y_max]\n",
        "    ),\n",
        "    legend=dict(\n",
        "        title=\"News Networks\",\n",
        "        orientation=\"h\",\n",
        "        y=-0.2,\n",
        "        x=0.5,\n",
        "        xanchor=\"center\"\n",
        "    ),\n",
        "    plot_bgcolor=\"white\",\n",
        "    width=900,\n",
        "    height=500,\n",
        "    margin=dict(l=50, r=50, t=80, b=100)\n",
        ")\n",
        "\n",
        "# Show figure\n",
        "fig.show()"
      ],
      "id": "34edde2c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| label: fig-animated-monthly-tone-2020-window\n",
        "#| fig-cap: Animated tone trends around the 2020 election (Oct 4â€“Dec 3)\n",
        "\n",
        "import plotly.graph_objects as go\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from plotly.subplots import make_subplots\n",
        "import datetime as dt\n",
        "\n",
        "# Network color definitions\n",
        "NETWORK_COLORS = {\n",
        "    'MSNBC': '#3366CC',\n",
        "    'ABC News': '#6633CC',\n",
        "    'Fox News': '#CC3366'\n",
        "}\n",
        "\n",
        "# Define the window around the 2020 election\n",
        "start_date = pd.to_datetime(\"2020-10-04\")\n",
        "end_date = pd.to_datetime(\"2020-12-03\")\n",
        "\n",
        "# Filter the dataframe to this window using parsed_date instead of month\n",
        "df_window = df[(df['parsed_date'] >= start_date) & (df['parsed_date'] <= end_date)]\n",
        "\n",
        "# Calculate daily average tone by network for more granular view around election\n",
        "df_window['date'] = df_window['parsed_date'].dt.date\n",
        "daily_tone = df_window.groupby(['date', 'network'])['tone'].mean().unstack()\n",
        "\n",
        "# Reset index and convert date to datetime for plotting\n",
        "daily_tone_reset = daily_tone.reset_index()\n",
        "daily_tone_reset['date_datetime'] = pd.to_datetime(daily_tone_reset['date'])\n",
        "\n",
        "# Set up plot\n",
        "fig = go.Figure()\n",
        "\n",
        "# Add neutral tone line\n",
        "fig.add_shape(\n",
        "    type=\"line\",\n",
        "    x0=daily_tone_reset['date_datetime'].min(),\n",
        "    x1=daily_tone_reset['date_datetime'].max(),\n",
        "    y0=0,\n",
        "    y1=0,\n",
        "    line=dict(color=\"black\", width=2, dash=\"dash\"),\n",
        "    name=\"Neutral Tone\"\n",
        ")\n",
        "\n",
        "# Set animation parameters\n",
        "num_frames = 30\n",
        "animation_frames = []\n",
        "\n",
        "# Axis range\n",
        "y_min = daily_tone.min().min() - 0.5\n",
        "y_max = daily_tone.max().max() + 0.5\n",
        "\n",
        "# Create animation frames\n",
        "for i in range(num_frames):\n",
        "    frame_data = []\n",
        "    cutoff_idx = int((i + 1) * len(daily_tone_reset) / num_frames)\n",
        "    if i == num_frames - 1:\n",
        "        cutoff_idx = len(daily_tone_reset)\n",
        "\n",
        "    for column in daily_tone.columns:\n",
        "        visible_data = daily_tone_reset.iloc[:cutoff_idx]\n",
        "        frame_data.append(\n",
        "            go.Scatter(\n",
        "                x=visible_data['date_datetime'],\n",
        "                y=visible_data[column],\n",
        "                mode=\"lines\",\n",
        "                name=column,\n",
        "                line=dict(color=NETWORK_COLORS[column], width=4),\n",
        "                showlegend=(i == num_frames - 1)\n",
        "            )\n",
        "        )\n",
        "    animation_frames.append(go.Frame(data=frame_data, name=f\"frame_{i}\"))\n",
        "\n",
        "# Add initial trace (first point only)\n",
        "for column in daily_tone.columns:\n",
        "    if column in daily_tone_reset.columns and len(daily_tone_reset) > 0:\n",
        "        fig.add_trace(\n",
        "            go.Scatter(\n",
        "                x=[daily_tone_reset['date_datetime'].iloc[0]],\n",
        "                y=[daily_tone_reset[column].iloc[0]],\n",
        "                mode=\"lines\",\n",
        "                name=column,\n",
        "                line=dict(color=NETWORK_COLORS[column], width=4)\n",
        "            )\n",
        "        )\n",
        "\n",
        "# Update layout\n",
        "fig.update_layout(\n",
        "    title=dict(\n",
        "        text=\"Daily Average Tone by News Network (Oct 4â€“Dec 3, 2020)\",\n",
        "        font=dict(size=18, family=\"Arial, sans-serif\"),\n",
        "        x=0.5,\n",
        "        xanchor=\"center\"\n",
        "    ),\n",
        "    xaxis=dict(\n",
        "        title=\"Date\",\n",
        "        titlefont=dict(size=14),\n",
        "        tickformat=\"%b %d\",\n",
        "        gridcolor=\"#E5E5E5\",\n",
        "        showgrid=True\n",
        "    ),\n",
        "    yaxis=dict(\n",
        "        title=\"Average Tone Score\",\n",
        "        titlefont=dict(size=14),\n",
        "        gridcolor=\"#E5E5E5\",\n",
        "        showgrid=True,\n",
        "        range=[y_min, y_max]\n",
        "    ),\n",
        "    legend=dict(\n",
        "        title=\"News Networks\",\n",
        "        orientation=\"h\",\n",
        "        y=-0.2,\n",
        "        x=0.5,\n",
        "        xanchor=\"center\"\n",
        "    ),\n",
        "    plot_bgcolor=\"white\",\n",
        "    width=900,\n",
        "    height=500,\n",
        "    margin=dict(l=50, r=50, t=80, b=100),\n",
        "    updatemenus=[\n",
        "        dict(\n",
        "            type=\"buttons\",\n",
        "            showactive=False,\n",
        "            buttons=[\n",
        "                dict(\n",
        "                    label=\"Play\",\n",
        "                    method=\"animate\",\n",
        "                    args=[\n",
        "                        None,\n",
        "                        dict(\n",
        "                            frame=dict(duration=100, redraw=True),\n",
        "                            fromcurrent=True,\n",
        "                            transition=dict(duration=50, easing=\"cubic-in-out\")\n",
        "                        )\n",
        "                    ]\n",
        "                ),\n",
        "                dict(\n",
        "                    label=\"Pause\",\n",
        "                    method=\"animate\",\n",
        "                    args=[\n",
        "                        [None],\n",
        "                        dict(\n",
        "                            frame=dict(duration=0, redraw=True),\n",
        "                            mode=\"immediate\",\n",
        "                            transition=dict(duration=0)\n",
        "                        )\n",
        "                    ]\n",
        "                )\n",
        "            ],\n",
        "            direction=\"left\",\n",
        "            pad=dict(r=10, t=10),\n",
        "            x=0.1,\n",
        "            y=-0.2,\n",
        "            xanchor=\"right\",\n",
        "            yanchor=\"top\"\n",
        "        )\n",
        "    ]\n",
        ")\n",
        "\n",
        "# Add frames to figure\n",
        "fig.frames = animation_frames\n",
        "\n",
        "# Add election day (Nov 3, 2020)\n",
        "election_date = pd.to_datetime(\"2020-11-03\")\n",
        "fig.add_vline(\n",
        "    x=election_date,\n",
        "    line=dict(color=\"red\", width=2, dash=\"dot\")\n",
        ")\n",
        "\n",
        "# Add election day annotation\n",
        "fig.add_annotation(\n",
        "    x=election_date,\n",
        "    y=y_max - 0.3,\n",
        "    text=\"Election Day\",\n",
        "    showarrow=False,\n",
        "    font=dict(size=10)\n",
        ")\n",
        "\n",
        "# Show figure\n",
        "fig.show()"
      ],
      "id": "fig-animated-monthly-tone-2020-window",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "conclusions\n"
      ],
      "id": "71dd0a62"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| label: fig-animated-monthly-tone-2024-window\n",
        "#| fig-cap: Animated tone trends around the 2024 election (Oct 6â€“Dec 5)\n",
        "\n",
        "import plotly.graph_objects as go\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from plotly.subplots import make_subplots\n",
        "import datetime as dt\n",
        "\n",
        "# Network color definitions\n",
        "NETWORK_COLORS = {\n",
        "    'MSNBC': '#3366CC',\n",
        "    'ABC News': '#6633CC',\n",
        "    'Fox News': '#CC3366'\n",
        "}\n",
        "\n",
        "# Define the window around the 2024 election\n",
        "start_date = pd.to_datetime(\"2024-10-06\")\n",
        "end_date = pd.to_datetime(\"2024-12-05\")\n",
        "\n",
        "# Filter the dataframe to this window using parsed_date instead of month\n",
        "df_window = df[(df['parsed_date'] >= start_date) & (df['parsed_date'] <= end_date)]\n",
        "\n",
        "# Calculate daily average tone by network for more granular view around election\n",
        "df_window['date'] = df_window['parsed_date'].dt.date\n",
        "daily_tone = df_window.groupby(['date', 'network'])['tone'].mean().unstack()\n",
        "\n",
        "# Reset index and convert date to datetime for plotting\n",
        "daily_tone_reset = daily_tone.reset_index()\n",
        "daily_tone_reset['date_datetime'] = pd.to_datetime(daily_tone_reset['date'])\n",
        "\n",
        "# Set up plot\n",
        "fig = go.Figure()\n",
        "\n",
        "# Add neutral tone line\n",
        "fig.add_shape(\n",
        "    type=\"line\",\n",
        "    x0=daily_tone_reset['date_datetime'].min(),\n",
        "    x1=daily_tone_reset['date_datetime'].max(),\n",
        "    y0=0,\n",
        "    y1=0,\n",
        "    line=dict(color=\"black\", width=2, dash=\"dash\"),\n",
        "    name=\"Neutral Tone\"\n",
        ")\n",
        "\n",
        "# Set animation parameters\n",
        "num_frames = 30\n",
        "animation_frames = []\n",
        "\n",
        "# Axis range\n",
        "y_min = daily_tone.min().min() - 0.5\n",
        "y_max = daily_tone.max().max() + 0.5\n",
        "\n",
        "# Create animation frames\n",
        "for i in range(num_frames):\n",
        "    frame_data = []\n",
        "    cutoff_idx = int((i + 1) * len(daily_tone_reset) / num_frames)\n",
        "    if i == num_frames - 1:\n",
        "        cutoff_idx = len(daily_tone_reset)\n",
        "\n",
        "    for column in daily_tone.columns:\n",
        "        visible_data = daily_tone_reset.iloc[:cutoff_idx]\n",
        "        frame_data.append(\n",
        "            go.Scatter(\n",
        "                x=visible_data['date_datetime'],\n",
        "                y=visible_data[column],\n",
        "                mode=\"lines\",\n",
        "                name=column,\n",
        "                line=dict(color=NETWORK_COLORS[column], width=4),\n",
        "                showlegend=(i == num_frames - 1)\n",
        "            )\n",
        "        )\n",
        "    animation_frames.append(go.Frame(data=frame_data, name=f\"frame_{i}\"))\n",
        "\n",
        "# Add initial trace (first point only)\n",
        "for column in daily_tone.columns:\n",
        "    if column in daily_tone_reset.columns and len(daily_tone_reset) > 0:\n",
        "        fig.add_trace(\n",
        "            go.Scatter(\n",
        "                x=[daily_tone_reset['date_datetime'].iloc[0]],\n",
        "                y=[daily_tone_reset[column].iloc[0]],\n",
        "                mode=\"lines\",\n",
        "                name=column,\n",
        "                line=dict(color=NETWORK_COLORS[column], width=4)\n",
        "            )\n",
        "        )\n",
        "\n",
        "# Update layout\n",
        "fig.update_layout(\n",
        "    title=dict(\n",
        "        text=\"Daily Average Tone by News Network (Oct 6â€“Dec 5, 2024)\",\n",
        "        font=dict(size=18, family=\"Arial, sans-serif\"),\n",
        "        x=0.5,\n",
        "        xanchor=\"center\"\n",
        "    ),\n",
        "    xaxis=dict(\n",
        "        title=\"Date\",\n",
        "        titlefont=dict(size=14),\n",
        "        tickformat=\"%b %d\",\n",
        "        gridcolor=\"#E5E5E5\",\n",
        "        showgrid=True\n",
        "    ),\n",
        "    yaxis=dict(\n",
        "        title=\"Average Tone Score\",\n",
        "        titlefont=dict(size=14),\n",
        "        gridcolor=\"#E5E5E5\",\n",
        "        showgrid=True,\n",
        "        range=[y_min, y_max]\n",
        "    ),\n",
        "    legend=dict(\n",
        "        title=\"News Networks\",\n",
        "        orientation=\"h\",\n",
        "        y=-0.2,\n",
        "        x=0.5,\n",
        "        xanchor=\"center\"\n",
        "    ),\n",
        "    plot_bgcolor=\"white\",\n",
        "    width=900,\n",
        "    height=500,\n",
        "    margin=dict(l=50, r=50, t=80, b=100),\n",
        "    updatemenus=[\n",
        "        dict(\n",
        "            type=\"buttons\",\n",
        "            showactive=False,\n",
        "            buttons=[\n",
        "                dict(\n",
        "                    label=\"Play\",\n",
        "                    method=\"animate\",\n",
        "                    args=[\n",
        "                        None,\n",
        "                        dict(\n",
        "                            frame=dict(duration=100, redraw=True),\n",
        "                            fromcurrent=True,\n",
        "                            transition=dict(duration=50, easing=\"cubic-in-out\")\n",
        "                        )\n",
        "                    ]\n",
        "                ),\n",
        "                dict(\n",
        "                    label=\"Pause\",\n",
        "                    method=\"animate\",\n",
        "                    args=[\n",
        "                        [None],\n",
        "                        dict(\n",
        "                            frame=dict(duration=0, redraw=True),\n",
        "                            mode=\"immediate\",\n",
        "                            transition=dict(duration=0)\n",
        "                        )\n",
        "                    ]\n",
        "                )\n",
        "            ],\n",
        "            direction=\"left\",\n",
        "            pad=dict(r=10, t=10),\n",
        "            x=0.1,\n",
        "            y=-0.2,\n",
        "            xanchor=\"right\",\n",
        "            yanchor=\"top\"\n",
        "        )\n",
        "    ]\n",
        ")\n",
        "\n",
        "# Add frames to figure\n",
        "fig.frames = animation_frames\n",
        "\n",
        "# Add election day (Nov 5, 2024)\n",
        "election_date = pd.to_datetime(\"2024-11-05\")\n",
        "fig.add_vline(\n",
        "    x=election_date,\n",
        "    line=dict(color=\"red\", width=2, dash=\"dot\")\n",
        ")\n",
        "\n",
        "# Add election day annotation\n",
        "fig.add_annotation(\n",
        "    x=election_date,\n",
        "    y=y_max - 0.3,\n",
        "    text=\"Election Day\",\n",
        "    showarrow=False,\n",
        "    font=dict(size=10)\n",
        ")\n",
        "\n",
        "# Show figure\n",
        "fig.show()"
      ],
      "id": "fig-animated-monthly-tone-2024-window",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/opt/miniconda3/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}